
classDiagram
    direction RL
    class SimulationRules {
        + SimulationRules(Map~String, Parameter~?~~, GetNeighbors)
        + getNeighbors(Cell, Grid) List~Cell~
        + getNumberStates() int
        + getNextStatesForAllCells(Grid) List~CellUpdate~
        + getLayers() int
        + getRequiredParameters() List~String~
        + setParameters(Map~String, Parameter~?~~) void
        + throwInvalidParameterException(String) void
        + checkMissingParameterAndThrowException(String) void
        + getParameters() Map~String, Parameter~?~~
        + getStepSize() int
        + getNeighborConfig() GetNeighbors
        + getNextState(Cell, Grid) int
    }
    class DarwinRules {
        + DarwinRules(Map~String, Parameter~?~~, GetNeighbors)
        + getNumberStates() int
        + getNextStatesForAllCells(Grid) List~CellUpdate~
    }
    class GameOfLifeRules {
        + GameOfLifeRules(Map~String, Parameter~?~~, GetNeighbors)
        + getNextState(Cell, Grid) int
        + getRequiredParameters() List~String~
        + getNumberStates() int
    }
    class LangtonsLoopsRules {
        + LangtonsLoopsRules(Map~String, Parameter~?~~, GetNeighbors)
        + getNumberStates() int
        + getNextState(Cell, Grid) int
    }
    class PercolationRules {
        + PercolationRules(Map~String, Parameter~?~~, GetNeighbors)
        + getNumberStates() int
        + getNextState(Cell, Grid) int
    }
    class SpreadingOfFireRules {
        + SpreadingOfFireRules(Map~String, Parameter~?~~, GetNeighbors)
        + getNumberStates() int
        + getNextState(Cell, Grid) int
        + getRequiredParameters() List~String~
    }

    DarwinRules  -->  SimulationRules
    GameOfLifeRules  -->  SimulationRules
    LangtonsLoopsRules  -->  SimulationRules
    PercolationRules  -->  SimulationRules
    SpreadingOfFireRules  -->  SimulationRules

